name: 'Prepare Cluster'
description: 'Prepare Cluster'
inputs:
  app-slug:
    description: 'App Slug.'
    required: true
  api-token:
    description: 'API Token.'
    required: true
  namespace:
    description: 'The namespace to install the application to'
    default: 'default'
    required: true
  chart:
    description: 'Path to the helm chart (One of `chart` or `yaml-dir` is required).'
    required: false
  yaml-dir:
    description: 'The directory containing multiple yamls for a Replicated release.'
    required: false
  kubernetes-distribution:
    description: 'Kubernetes distribution of the cluster to provision.'
    required: true
  kubernetes-version:
    description: 'Kubernetes version to provision (format is distribution dependent).'
    required: false
  license-id:
    description: "License ID to use for the installation (required for Embedded Cluster distribution)."
    required: false
  cluster-name:
    description: 'Name of the cluster to provision'
    required: false
  ttl:
    description: 'Cluster TTL (duration, max 48h)'
    required: false
  disk:
    description: 'Disk size in GiB'
    required: false
  nodes:
    description: 'Number of nodes to provision'
    required: false
  min-nodes:
    description: 'Minimum number of nodes to provision'
    required: false
  max-nodes:
    description: 'Maximum number of nodes to provision'
    required: false
  instance-type:
    description: 'Instance type to provision'
    required: false
  timeout-minutes:
    description: 'Time to wait for the cluster to have a status of `running`'
    required: false
    default: '20'
  node-groups:
    description: |
      Node groups to provision.
      Example:
      <pre>node-groups: \|
        - name: "worker"
          instance-type: "t3.medium"
          disk: 100
          nodes: 3</pre>
    required: false
  tags:
    description: |
      Tags to assign to the cluster.
      Example:
      <pre>tags: \|
        - key: "department"
          value: "engineering"</pre>
    required: false
  ip-family:
    description: "IP Family to use for the cluster (ipv4|ipv6|dual)"
    required: false
  kubeconfig-path:
    description: 'If specified, the kubeconfig will be written to this path'
    required: false
  export-kubeconfig:
    description: 'Export the KUBECONFIG variable (true/false)'
    required: false
    default: 'false'
  helm-values:
    description: 'A Helm values.yaml file to use'
    required: false
  helm-chart-name:
    description: 'The name of the Helm chart to use'
    required: false
  helm-run-preflights:
    description: 'Run preflight checks (true/false)'
    required: false
    default: 'true'
  kots-config-values:
    description: 'The KOTS config values to use'
    required: false
  kots-wait-duration:
    description: 'Timeout for KOTS to be used while waiting for individual components to be ready. must be in Go duration format (eg: 10s, 2m) (default "2m")'
    required: false
  customer-entitlements:
    description: |
      Entitlements to assign to the customer.
      Example:
      <pre>customer-entitlements: \|
        - name: "number-of-users"
          value: "10"</pre>
    required: false
outputs:
  cluster-id: # id of the cluster
    description: 'Contains the cluster id.'
    value: ${{ steps.create-cluster.outputs.cluster-id }}
  cluster-kubeconfig: # kubeconfig of the cluster
    description: 'Contains the kubeconfig to connect with the cluster.'
    value: ${{ steps.create-cluster.outputs.cluster-kubeconfig }}
runs:
  using: composite
  steps:
  - name: Create Release
    id: create-release
    shell: bash
    run: node ${{ github.action_path }}/create-release.js
    env:
      INPUT_APP-SLUG: ${{ inputs.app-slug }}
      INPUT_API-TOKEN: ${{ inputs.api-token }}
      INPUT_YAML-DIR: ${{ inputs.yaml-dir }}
      INPUT_CHART: ${{ inputs.chart }}
  - name: Create Customer
    id: create-customer
    shell: bash
    run: node ${{ github.action_path }}/create-customer.js
    env:
      INPUT_APP-SLUG: ${{ inputs.app-slug }}
      INPUT_API-TOKEN: ${{ inputs.api-token }}
      INPUT_CUSTOMER-NAME: ${{ github.ref_name }}-${{ inputs.kubernetes-distribution }}-${{ inputs.kubernetes-version }}
      INPUT_CUSTOMER-EMAIL: ${{ github.ref_name }}@example.com
      INPUT_LICENSE-TYPE: "test"
      INPUT_ENTITLEMENTS: ${{ inputs.customer-entitlements }}
      INPUT_CHANNEL-SLUG: ${{ steps.create-release.outputs.channel-slug }}
  - name: Create Cluster
    id: create-cluster
    shell: bash
    run: node ${{ github.action_path }}/create-cluster.js
    env:
      INPUT_API-TOKEN: "${{ inputs.api-token }}"
      INPUT_KUBERNETES-DISTRIBUTION: ${{ inputs.kubernetes-distribution }}
      INPUT_KUBERNETES-VERSION: ${{ inputs.kubernetes-version }}
      INPUT_CLUSTER-NAME: ${{ inputs.cluster-name || format('{0}-{1}-{2}', github.ref_name, inputs.kubernetes-distribution, inputs.kubernetes-version) }}
      INPUT_TTL: ${{ inputs.ttl || '' }}
      INPUT_DISK: ${{ inputs.disk || '' }}
      INPUT_NODES: ${{ inputs.nodes || '' }}
      INPUT_MIN-NODES: ${{ inputs.min-nodes || '' }}
      INPUT_MAX-NODES: ${{ inputs.max-nodes || '' }}
      INPUT_INSTANCE-TYPE: ${{ inputs.instance-type || '' }}
      INPUT_TIMEOUT-MINUTES: ${{ inputs.timeout-minutes || 20 }}
      INPUT_NODE-GROUPS: ${{ inputs.node-groups || '' }}
      INPUT_TAGS: ${{ inputs.tags || '' }}
      INPUT_LICENSE-ID: ${{ input.license-id || '' }}
      INPUT_IP-FAMILY: ${{ inputs.ip-family || '' }}
      INPUT_KUBECONFIG-PATH: ${{ inputs.kubeconfig-path || '' }}
      INPUT_EXPORT-KUBECONFIG: ${{ inputs.export-kubeconfig || false }}
  - name: Deploy the app with Helm
    if: ${{ inputs.chart != '' }}
    shell: bash
    run: node ${{ github.action_path }}/helm-install.js
    env:
      INPUT_KUBECONFIG: ${{ steps.create-cluster.outputs.cluster-kubeconfig }}
      INPUT_HELM-PATH: "helm"
      INPUT_REGISTRY-USERNAME: ${{ github.ref_name }}@example.com
      INPUT_REGISTRY-PASSWORD: ${{ steps.create-customer.outputs.license-id }}
      INPUT_CHART: oci://registry.replicated.com/${{ inputs.app-slug }}/release__${{ steps.create-release.outputs.release-sequence }}/${{ inputs.helm-chart-name }}
      INPUT_NAME: ${{ inputs.app-slug }}
      INPUT_NAMESPACE: ${{ inputs.namespace }}
      INPUT_VALUES: ${{ inputs.helm-values }}
      INPUT_RUN-PREFLIGHTS: ${{ inputs.helm-run-preflights }}
  - name: Deploy the app with KOTS
    if: ${{ inputs.yaml-dir != '' }}
    shell: bash
    run: node ${{ github.action_path }}/kots-install.js
    env:
      INPUT_KUBECONFIG: ${{ steps.create-cluster.outputs.cluster-kubeconfig }}
      INPUT_APP-SLUG: ${{ inputs.app-slug }}/${{ steps.create-release.outputs.channel-slug }}
      INPUT_LICENSE-FILE: ${{ steps.create-customer.outputs.license-file }}
      INPUT_APP-VERSION-LABEL: release__${{ steps.create-release.outputs.release-sequence }}
      INPUT_CONFIG-VALUES: ${{ inputs.kots-config-values }}
      INPUT_WAIT-DURATION: ${{ inputs.kots-wait-duration }}
      INPUT_NAMESPACE: ${{ inputs.namespace }}
      INPUT_KOTS-VERSION: latest
